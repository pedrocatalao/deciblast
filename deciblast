#!/usr/bin/env python3

import numpy as np
import sounddevice as sd
import curses
import json
import os

GRAPH_COLOR_PAIR = 250
FRAME_COLOR_PAIR = 251
LABEL_COLOR_PAIR = 252
SHORTCUT_COLOR_PAIR = 253

def audio_callback(indata, frames, time, status):
    if status:
        print(status, flush=True)
    global audio_data
    audio_data = np.copy(indata[:, 0])


def visualize(stdscr):
    border_needs_redraw = True
    labels_need_redraw = True
    prev_size = (-1, -1)
    config_file = os.path.expanduser("~/.deciblast.conf")

    def save_config():
        config = {
            "current_frame_color": current_frame_color,
            "current_spacing": current_spacing,
            "show_labels": show_labels,
            "show_frame": show_frame,
            "current_gradient": current_gradient,
            "current_blocks": current_blocks
        }
        with open(config_file, 'w') as f:
            json.dump(config, f)

    def load_config():
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r') as f:
                    return json.load(f)
            except Exception:
                return {}
        return {}

    def clear_frame():
        stdscr.move(0, 0)
        stdscr.clrtoeol()

        stdscr.move(height - 1, 0)
        stdscr.clrtoeol()

        # Clear left and right columns
        for y in range(1, height - 1):
            stdscr.addch(y, 0, ' ')               # Left edge
            stdscr.addch(y, width - 1, ' ')       # Right edge

    # Update gradient colors
    def update_gradient():
        colors = init_gradient_colors(gradient_sets[current_gradient][0])
        for i, color in enumerate(colors):
            curses.init_pair(i + 1, color, -1)
        stdscr.refresh()

    def init_gradient_colors(base_color):
        color_ids = []
        base_color = gradient_sets[current_gradient]
        base_r, base_g, base_b = base_color
        for i in range(height - 2):
            factor = 1.0 - (i / (height - 3)) * 0.9  # darken to 50%
            r = int(base_r * factor)
            g = int(base_g * factor)
            b = int(base_b * factor)

            color_id = 1 + len(color_ids)
            curses.init_color(color_id, r, g, b)
            color_ids.append(color_id)

        return color_ids

    # Box characters
    h_line = '─'
    v_line = '│'
    tl_corner = '┌'
    tr_corner = '┐'
    bl_corner = '└'
    br_corner = '┘'

    curses.start_color()
    curses.use_default_colors()

    # Define gradient sets
    gradient_sets = [
        (800, 20, 20),
        (1000, 322, 40),
        (900, 600, 111),
        (100, 800, 222),
        (50, 800, 1000),
        (111, 111, 1000),
        (660, 222, 999),
    ]

    # Define block character sets
    block_sets = [
        " ▁▂▃▄▅▆▇█",
        " ▁▂▃▄▅▆▇",
        " ▖▗▘▝▚▞▛▜▟▙█", # Lava effect
        " ▏▎▍▌▋▊▉█",
        " ■",
        " ░▒▓",
        " ⣠⣤⣶⣿",
        " ⣠⣤⣶",
        " ⠀⠁⠃⠇⠏⠟⠿",
        " ⡀⡄⡆⡇"
    ]

    # Bar spacing options
    spacing_options = [0, 1, 2, 3]

    # Load stored configuration
    config = load_config()
    current_gradient = config.get("current_gradient", 0)    # Index for gradient selection
    current_blocks = config.get("current_blocks", 0)        # Index for block character selection
    current_spacing = config.get("current_spacing", 0)
    current_frame_color = config.get("current_frame_color", 0)
    show_labels = config.get("show_labels", True)
    show_frame = config.get("show_frame", True)

    # Frame and label colors
    frame_colors = [100, 137, 124, 106, 93, 54, 71, 25, 23, 18, -1, 255]
    curses.init_pair(LABEL_COLOR_PAIR, 231, -1)       # White for label
    curses.init_pair(SHORTCUT_COLOR_PAIR, 245, -1)       # Dark grey
    curses.init_pair(FRAME_COLOR_PAIR, frame_colors[current_frame_color], -1)

    height, _ = stdscr.getmaxyx()

    # Init color pairs
    update_gradient()

    curses.curs_set(0)
    stdscr.nodelay(1)
    stdscr.timeout(50)
    curses.mousemask(curses.ALL_MOUSE_EVENTS | curses.REPORT_MOUSE_POSITION)

    global audio_data
    samplerate = 44100
    chunk_size = 1024
    decay_factor = 0.1
    rise_factor = 0.3
    low_freq_threshold = 0.05
    smoothing_factor = 1
    min_freq = 1000
    max_freq = 11000

    with sd.InputStream(callback=audio_callback, channels=1, samplerate=samplerate, blocksize=chunk_size):
        bar_heights = np.full(200, 1)
        max_heights = np.zeros(200)
        smoothed_bars = np.zeros(200)

        while True:
            height, width = stdscr.getmaxyx()
            num_colors = height - 2
            if (height, width) != prev_size:
                border_needs_redraw = True
                labels_need_redraw = True
                prev_size = (height, width)

            # Optimized clear using cached positions
            clear_positions = [
                (y, x)
                for y in range(1, height - 1)
                for x in range(1, width - 1)
            ]
            for y, x in clear_positions:
                stdscr.addch(y, x, ' ')

            # Draw outer border box
            if show_frame and border_needs_redraw:
                for x in range(1, width - 1):
                    try:
                        stdscr.addch(0, x, h_line, curses.color_pair(FRAME_COLOR_PAIR))
                        stdscr.addch(height - 1, x, h_line, curses.color_pair(FRAME_COLOR_PAIR))
                    except curses.error:
                        pass
                for y in range(1, height - 1):
                    try:
                        stdscr.addch(y, 0, v_line, curses.color_pair(FRAME_COLOR_PAIR))
                        stdscr.addch(y, width - 1, v_line, curses.color_pair(FRAME_COLOR_PAIR))
                    except curses.error:
                        pass
                try:
                    stdscr.addch(0, 0, tl_corner, curses.color_pair(FRAME_COLOR_PAIR))
                    stdscr.addch(0, width - 1, tr_corner, curses.color_pair(FRAME_COLOR_PAIR))
                    stdscr.addch(height - 1, 0, bl_corner, curses.color_pair(FRAME_COLOR_PAIR))
                    stdscr.addch(height - 1, width - 1, br_corner, curses.color_pair(FRAME_COLOR_PAIR))
                except curses.error:
                    pass

            # Draw evenly spaced labels on the top border
            if show_labels and labels_need_redraw:
                top_labels = [f"┤quit├", f"┤spacing├", f"┤frame├", f"┤labels├"]
                spacing_top = width // (len(top_labels)+1)
                for idx, label in enumerate(top_labels):
                    start_x = spacing_top * (idx + 1) - len(label) // 2
                    for i, ch in enumerate(label):
                        if 0 < start_x + i < width - 1:
                            if ch in ['┤', '├']:
                                if not show_frame:
                                    continue
                                color = curses.color_pair(FRAME_COLOR_PAIR)
                            elif i == 1:
                                color = curses.color_pair(SHORTCUT_COLOR_PAIR)
                            else:
                                color = curses.color_pair(LABEL_COLOR_PAIR)
                            stdscr.addch(0, start_x + i, ch, color)

            # Draw evenly spaced labels on the bottom border
            if show_labels and labels_need_redraw:
                labels = [f"┤< color >├", f"┤↑ style ↓├"]
                spacing = width // (len(labels) + 1)
                for idx, label in enumerate(labels):
                    start_x = spacing * (idx + 1) - len(label) // 2
                    for i, ch in enumerate(label):
                        if 0 < start_x + i < width - 1:
                            if ch in ['┤', '├']:
                                if not show_frame:
                                    continue
                                color = curses.color_pair(FRAME_COLOR_PAIR)
                            elif ch in ['<', '>', '↑', '↓', 'q']:
                                color = curses.color_pair(SHORTCUT_COLOR_PAIR)
                            else:
                                color = curses.color_pair(LABEL_COLOR_PAIR)
                            stdscr.addch(height - 1, start_x + i, ch, color)

            height, width = stdscr.getmaxyx()
            block_chars = block_sets[current_blocks]
            max_blocks = len(block_chars) - 1

            # Inner drawing box boundaries
            inner_top = 1
            inner_bottom = height - 2
            inner_left = 1
            inner_right = width - 2

            bar_spacing = spacing_options[current_spacing]
            num_bars = max(1, ((inner_right - inner_left) + (bar_spacing + 1)) // (bar_spacing + 1))
            if len(bar_heights) != num_bars:
                bar_heights = np.full(num_bars, 1)
                max_heights = np.zeros(num_bars)
                smoothed_bars = np.zeros(num_bars)
            else:
                bar_heights = bar_heights[:num_bars]
                max_heights = max_heights[:num_bars]
                smoothed_bars = smoothed_bars[:num_bars]

            if len(audio_data) == 0:
                continue

            fft_data = np.abs(np.fft.rfft(audio_data))
            freqs = np.fft.rfftfreq(len(audio_data), d=1/samplerate)

            valid_indices = np.where((freqs >= min_freq) & (freqs <= max_freq))
            freqs = freqs[valid_indices]
            fft_data = fft_data[valid_indices]

            log_freqs = np.logspace(np.log10(min_freq), np.log10(max_freq), num=num_bars)
            fft_interpolated = np.interp(log_freqs, freqs, fft_data)

            for i, freq in enumerate(log_freqs):
                if freq < min_freq and fft_interpolated[i] < low_freq_threshold:
                    fft_interpolated[i] = 0

            sensitivity_curve = np.interp(log_freqs, [min_freq, max_freq], [0.5, 2.0])
            fft_interpolated *= sensitivity_curve

            fft_data = np.log1p(fft_interpolated)
            normalized_bars = np.interp(fft_data, (fft_data.min(), fft_data.max()), (1, height * max_blocks))

            smoothed_bars = (1 - smoothing_factor) * smoothed_bars + smoothing_factor * normalized_bars

            for i in range(num_bars):
                if smoothed_bars[i] > bar_heights[i]:
                    bar_heights[i] += rise_factor * (smoothed_bars[i] - bar_heights[i])
                    max_heights[i] = bar_heights[i]
                else:
                    bar_heights[i] -= decay_factor * (bar_heights[i] - smoothed_bars[i])

                num_chars = int(bar_heights[i] / max_blocks)
                remainder = int(bar_heights[i] % max_blocks)
                x_position = inner_left + min(i * (bar_spacing + 1), inner_right - inner_left)

                for j in range(num_chars):
                    y = max(inner_top, inner_bottom - j)
                    color_index = min(int((j / height) * num_colors), num_colors - 1) + 1
                    try:
                        stdscr.addch(y, x_position, block_chars[-1], curses.color_pair(color_index))
                    except curses.error:
                        pass

                if remainder > 0:
                    y_position = max(inner_top, inner_bottom - num_chars)
                    color_index = min(int((num_chars / height) * num_colors), num_colors - 1) + 1
                    try:
                        stdscr.addch(y_position, x_position, block_chars[remainder], curses.color_pair(color_index))
                    except curses.error:
                        pass

            # Handle user input for gradient, character set, and spacing switching
            key = stdscr.getch()

            if key == curses.KEY_MOUSE:
                try:
                    _, mx, my, _, mouse_event, = curses.getmouse()
                    if mouse_event & curses.BUTTON4_PRESSED:  # Scroll up
                        current_blocks = (current_blocks - 1) % len(block_sets)
                        save_config()
                    elif mouse_event & 0x8000000:  # Scroll down
                        current_blocks = (current_blocks + 1) % len(block_sets)
                        save_config()
                    elif mouse_event & 0x1000:  # Scroll right
                        current_gradient = (current_gradient + 1) % len(gradient_sets)
                        init_gradient_colors(gradient_sets[current_gradient][0])
                        save_config()
                    elif mouse_event & 0x2000:  # Scroll left
                        current_gradient = (current_gradient - 1) % len(gradient_sets)
                        init_gradient_colors(gradient_sets[current_gradient][0])
                        save_config()
                except curses.error:
                    pass
            elif key == curses.KEY_LEFT:
                current_gradient = (current_gradient - 1) % len(gradient_sets)
                init_gradient_colors(gradient_sets[current_gradient][0])
                save_config()
            elif key == curses.KEY_RIGHT:
                current_gradient = (current_gradient + 1) % len(gradient_sets)
                init_gradient_colors(gradient_sets[current_gradient][0])
                save_config()
            elif key == curses.KEY_UP:
                current_blocks = (current_blocks - 1) % len(block_sets)
                save_config()
            elif key == curses.KEY_DOWN:
                current_blocks = (current_blocks + 1) % len(block_sets)
                save_config()
            elif key == ord('s'):
                current_spacing = (current_spacing + 1) % len(spacing_options)
                save_config()
            elif key == ord('q'):
                os.system("tput reset")
                break
            elif key == ord('f'):
                current_frame_color = (current_frame_color + 1) % len(frame_colors)
                if current_frame_color == len(frame_colors) - 1:
                    show_frame = False
                    clear_frame()
                else:
                    show_frame = True
                    border_needs_redraw = True
                    curses.init_pair(FRAME_COLOR_PAIR, frame_colors[current_frame_color], -1)
                save_config()
            elif key == ord('l'):
                show_labels = not show_labels
                labels_need_redraw = True
                clear_frame()
                save_config()

# Boot animation
def show_bootup(stdscr):
    import random
    curses.start_color()
    curses.use_default_colors()
    stdscr.clear()
    curses.curs_set(0)
    stdscr.nodelay(0)
    stdscr.timeout(0)

    gradient = [160, 124, 88, 196]
    for i, color in enumerate(gradient):
        curses.init_pair(i + 1, color, -1)

    logo_text = "〢 d e c i b l a s t"

    charset = '▖▗▘▝▚▞▛▜▟▙█'
    height, width = stdscr.getmaxyx()
    start_y = height // 2
    start_x = (width - len(logo_text)) // 2

    flat = [(0, x, ch) for x, ch in enumerate(logo_text)]
    random.shuffle(flat)
    revealed = set()

    for _ in range(len(flat)):
        y, x, _ = flat.pop()
        revealed.add((y, x))

        for rx, real in enumerate(logo_text):
            color = curses.color_pair((rx) % len(gradient) + 1)
            if (0, rx) in revealed:
                stdscr.addch(start_y, start_x + rx, real, color | curses.A_BOLD)
            else:
                rand_ch = random.choice(charset)
                stdscr.addch(start_y, start_x + rx, rand_ch, color | curses.A_DIM)
        stdscr.refresh()
        curses.napms(50)
        stdscr.clear()

    curses.napms(500)
    stdscr.refresh()

if __name__ == "__main__":
    audio_data = np.zeros(1024)
    curses.wrapper(show_bootup)
    curses.wrapper(visualize)
